CREATE DATABASE VERANUM

CREATE TABLE EMPRESA
(
	RUT			INT PRIMARY KEY NOT NULL,
	NOMBRE		VARCHAR(255) NOT NULL,
	DIRECCION	VARCHAR(255) NOT NULL,
	TELEFONO	VARCHAR(12) NOT NULL,
	ESTADO		INT NOT NULL /*1) ACTIVO 2) INACTIVO*/
);

CREATE TABLE USUARIO
(
	RUT 			INT PRIMARY KEY NOT NULL,
	NOMBRE 			VARCHAR(70) NOT NULL,
	APELLIDO		VARCHAR(70)	NOT NULL,
	TELEFONO		VARCHAR(12) NOT NULL,
	DIRECCION 		VARCHAR(255),
	CORREO			VARCHAR(255),
	TIPO			INT NOT NULL,  /*1)normal 4)admin 5)super admin*/
	ESTADO			INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	NOMBREUSUARIO	VARCHAR(50) NOT NULL,
	CONTRASENA		VARCHAR(50) NOT NULL,
	EMPRESAID		INT,
	FOREIGN KEY (EMPRESAID) REFERENCES EMPRESA(RUT)
);

CREATE TABLE HOTEL
(
	ID				INT PRIMARY KEY AUTO_INCREMENT,
	DIRECCION		VARCHAR(255) NOT NULL,
	REGION 			VARCHAR(255) NOT NULL,
	TELEFONO 		VARCHAR(12) NOT NULL,
	ESTADO			INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	ADMINISTRADOR	INT,
	FOREIGN KEY (ADMINISTRADOR) REFERENCES USUARIO(RUT)
);

CREATE TABLE PRODUCTO 
(
	ID					INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NOMBRE				VARCHAR(70) NOT NULL,
	DESCRIPCION			VARCHAR(255),
	STOCK_TOTAL			INT NOT NULL,
	STOCK_DISPONIBLE	INT NOT NULL,
	UBICACION 			VARCHAR(255),
	ESTADO				INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	HOTELID				INT NOT NULL,
	FOREIGN KEY (HOTELID) REFERENCES HOTEL(ID) 
);

CREATE TABLE SERVICIO
(
	ID				INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NOMBRE			VARCHAR(70) NOT NULL,
	DESCRIPCION		VARCHAR(255) NOT NULL,
	ESTADO			INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	HOTELID			INT NOT NULL,
	FOREIGN KEY (HOTELID) REFERENCES HOTEL(ID) 
);



CREATE TABLE HABITACION
(
	ID 				INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NUMERO			VARCHAR(10) NOT NULL,
	CAMAS 			INT NOT NULL,
	CAPACIDAD		INT NOT NULL,
	BANOS			INT NOT NULL,
	ESTADO			INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	HOTELID			INT NOT NULL,
	FOREIGN KEY (HOTELID) REFERENCES HOTEL(ID)	
);

CREATE TABLE PROMOCION
(
	ID				INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	FECHA			DATE NOT NULL,
	PRECIO 			INT NOT NULL,
	ESTADO			INT NOT NULL, /*1) ACTIVO 2) INACTIVO*/
	HABITACIONID	INT NOT NULL,
	FOREIGN KEY (HABITACIONID) REFERENCES HABITACION(ID)
);

CREATE TABLE PRECIODIA
(
	ID				INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	FECHA			DATE NOT NULL,
	PRECIO 			INT NOT NULL,
	HABITACIONID	INT NOT NULL,
	FOREIGN KEY (HABITACIONID) REFERENCES HABITACION(ID)
);

CREATE TABLE RESERVA
(
	ID				INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	FECHA_INICIO	DATE NOT NULL,
	FECHA_TERMINO	DATE NOT NULL,
	TOTAL			INT NOT NULL,
	MEDIO_PAGO		INT NOT NULL,/*1) EFECTIVO 2)TARJETA*/
	ESTADO			INT NOT NULL, /*1)NORMAL 2) NULA*/
	HABITACIONID	INT NOT NULL,
	USUARIOID		INT NOT NULL,
	FOREIGN KEY (HABITACIONID) REFERENCES HABITACION(ID),
	FOREIGN KEY (USUARIOID) REFERENCES USUARIO(RUT) 
);

/*funciones*/

/*EMPRESA*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_EMPRESA
(
	RUT			INT,
	NOMBRE		VARCHAR(255),
	DIRECCION	VARCHAR(255),
	TELEFONO	VARCHAR(12)
)
RETURNS INT 
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM EMPRESA WHERE EMPRESA.RUT = RUT);
	IF X = 0 THEN
		INSERT INTO EMPRESA VALUES(RUT,NOMBRE,DIRECCION,TELEFONO,1);
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//


DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_EMPRESA
(
	RUT 		INT,
	NOMBRE		VARCHAR(255),
	DIRECCION	VARCHAR(255),
	TELEFONO	VARCHAR(12)
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM EMPRESA WHERE EMPRESA.RUT = RUT);
	IF X = 1 THEN
		UPDATE EMPRESA SET EMPRESA.NOMBRE = NOMBRE , EMPRESA.DIRECCION = DIRECCION , EMPRESA.TELEFONO = TELEFONO WHERE EMPRESA.RUT = RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_EMPRESA
(
	RUT 		INT,
	ESTADO		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM EMPRESA WHERE EMPRESA.RUT = RUT);
	IF X = 1 THEN
		UPDATE EMPRESA SET EMPRESA.ESTADO = ESTADO WHERE EMPRESA.RUT = RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

/*USUARIO*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_USUARIO
(
	RUT 			INT,
	NOMBRE 			VARCHAR(70),
	APELLIDO		VARCHAR(70),
	TELEFONO		VARCHAR(12),
	DIRECCION 		VARCHAR(255),
	CORREO			VARCHAR(255),
	NOMBREUSUARIO	VARCHAR(50),
	CONTRASENA		VARCHAR(50),
	EMPRESAID		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USUARIO WHERE USUARIO.RUT = RUT AND USUARIO.NOMBREUSUARIO = NOMBREUSUARIO);
	IF X = 0 THEN
		IF EMPRESAID <= 0 THEN
			INSERT INTO USUARIO VALUES (RUT,NOMBRE,APELLIDO,TELEFONO,DIRECCION,CORREO,1,1,NOMBREUSUARIO,CONTRASENA,NULL);
		ELSE
			INSERT INTO USUARIO VALUES (RUT,NOMBRE,APELLIDO,TELEFONO,DIRECCION,CORREO,1,1,NOMBREUSUARIO,CONTRASENA,EMPRESAID);
		END IF;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_USUARIO
(
	RUT 			INT,
	NOMBRE 			VARCHAR(70),
	APELLIDO		VARCHAR(70),
	TELEFONO		VARCHAR(12),
	DIRECCION 		VARCHAR(255),
	CORREO			VARCHAR(255),
	NOMBREUSUARIO	VARCHAR(50),
	CONTRASENA		VARCHAR(50),
	EMPRESAID		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USUARIO WHERE USUARIO.RUT = RUT);
	IF X = 1 THEN
		IF EMPRESAID < 0 THEN
			UPDATE USUARIO SET 
			USUARIO.NOMBRE = NOMBRE,
			USUARIO.APELLIDO = APELLIDO,
			USUARIO.TELEFONO = TELEFONO,
			USUARIO.DIRECCION = DIRECCION,
			USUARIO.CORREO = CORREO,
			USUARIO.NOMBREUSUARIO = NOMBREUSUARIO,
			USUARIO.CONTRASENA = CONTRASENA,
			USUARIO.EMPRESAID = EMPRESAID
			WHERE USUARIO.RUT = RUT;
		ELSE
			UPDATE USUARIO SET 
			USUARIO.NOMBRE = NOMBRE,
			USUARIO.APELLIDO = APELLIDO,
			USUARIO.TELEFONO = TELEFONO,
			USUARIO.DIRECCION = DIRECCION,
			USUARIO.CORREO = CORREO,
			USUARIO.NOMBREUSUARIO = NOMBREUSUARIO,
			USUARIO.CONTRASENA = CONTRASENA,
			USUARIO.EMPRESAID = NULL
			WHERE USUARIO.RUT = RUT;
		END IF;
		
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ESCALAR_PERMISOS
(
	RUT		INT,
	TIPO	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USUARIO WHERE RUT = RUT);
	IF X = 1 THEN
		UPDATE USUARIO SET TIPO = TIPO WHERE RUT =  RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_USUARIO
(
	RUT 		INT,
	ESTADO		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USUARIO WHERE USUARIO.RUT = RUT);
	IF X = 1 THEN
		UPDATE USUARIO SET USUARIO.ESTADO = ESTADO WHERE USUARIO.RUT = RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//


DELIMITER //
CREATE OR REPLACE FUNCTION FN_LOGIN
(
	NOMBREUSUARIO VARCHAR(255),
	CONTRASENA 	  VARCHAR(255)
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USUARIO WHERE USUARIO.NOMBREUSUARIO = NOMBREUSUARIO AND USUARIO.CONTRASENA = CONTRASENA);
	IF X = 1 THEN
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END 
//

/*HOTEL*/

DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_HOTEL
(
	DIRECCION		VARCHAR(255),
	REGION 			VARCHAR(255),
	TELEFONO 		VARCHAR(12),
	ADMINISTRADOR	INT
)
RETURNS INT
BEGIN 
	IF ADMINISTRADOR <= 0 THEN
		INSERT INTO HOTEL(DIRECCION,REGION,TELEFONO,ESTADO,ADMINISTRADOR) VALUES(DIRECCION,REGION,TELEFONO,1,NULL);
	ELSE
		INSERT INTO HOTEL(DIRECCION,REGION,TELEFONO,ESTADO,ADMINISTRADOR) VALUES(DIRECCION,REGION,TELEFONO,1,ADMINISTRADOR);
	END IF;
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_HOTEL
(
	ID 				INT,
	DIRECCION		VARCHAR(255),
	REGION 			VARCHAR(255),
	TELEFONO 		VARCHAR(12),
	ADMINISTRADOR	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X  = (SELECT COUNT(ID) FROM HOTEL WHERE HOTEL.ID = ID);
	IF X = 1 THEN
		IF ADMINISTRADOR <= 0 THEN
			UPDATE HOTEL SET 
			DIRECCION = DIRECCION,
			REGION = REGION,
			TELEFONO = TELEFONO,
			ADMINISTRADOR = NULL
			WHERE HOTEL.ID = ID;
		ELSE
			UPDATE HOTEL SET 
			DIRECCION = DIRECCION,
			REGION = REGION,
			TELEFONO = TELEFONO,
			ADMINISTRADOR = ADMINISTRADOR
			WHERE HOTEL.ID = ID;
		END IF;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_HOTEL
(
	ID 		INT,
	ESTADO		INT
)
RETURNS INT 
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM HOTEL WHERE HOTEL.ID = ID);
	IF X = 1 THEN
		UPDATE HOTEL SET ESTADO = ESTADO WHERE HOTEL.ID = ID;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

/*PRODUCTO*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_PRODUCTO
(
	NOMBRE				VARCHAR(70),
	DESCRIPCION			VARCHAR(255),
	STOCK_TOTAL			INT,
	STOCK_DISPONIBLE	INT,
	UBICACION 			VARCHAR(255),
	HOTELID				INT
)
RETURNS INT
BEGIN 
	INSERT INTO PRODUCTO(NOMBRE,DESCRIPCION,STOCK_TOTAL,STOCK_DISPONIBLE,UBICACION,ESTADO,HOTELID) 
	VALUES(NOMBRE,DESCRIPCION,STOCK_TOTAL,STOCK_DISPONIBLE,UBICACION,1,HOTELID);
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_PRODUCTO
(
	ID					INT,
	NOMBRE				VARCHAR(70),
	DESCRIPCION			VARCHAR(255),
	STOCK_TOTAL			INT,
	STOCK_DISPONIBLE	INT,
	UBICACION 			VARCHAR(255),
	HOTELID				INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PRODUCTO WHERE PRODUCTO.ID = ID );
	IF X = 1 THEN
		UPDATE PRODUCTO SET 
		PRODUCTO.NOMBRE = NOMBRE,
		PRODUCTO.DESCRIPCION = DESCRIPCION,
		PRODUCTO.STOCK_TOTAL = STOCK_TOTAL,
		PRODUCTO.STOCK_DISPONIBLE = STOCK_DISPONIBLE,
		PRODUCTO.UBICACION = UBICACION,
		PRODUCTO.HOTELID = HOTELID 
		WHERE PRODUCTO.ID = ID;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_PRODUCTO
(
	ID 			INT,
	ESTADO		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PRODUCTO WHERE PRODUCTO.ID = ID);
	IF X = 1 THEN
		UPDATE PRODUCTO SET ESTADO = ESTADO WHERE PRODUCTO.ID = ID;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

/*SERVICIO*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_SERVICIO
(
	NOMBRE			VARCHAR(70),
	DESCRIPCION		VARCHAR(255),
	HOTELID			INT
)
RETURNS INT
BEGIN 
	INSERT INTO SERVICIO(NOMBRE,DESCRIPCION,ESTADO,HOTELID) 
	VALUES(NOMBRE,DESCRIPCION,1,HOTELID);
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_SERVICIO
(
	ID 				INT,
	NOMBRE			VARCHAR(70),
	DESCRIPCION		VARCHAR(255),
	HOTELID			INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM SERVICIO WHERE SERVICIO.ID = ID);
	IF X = 1 THEN
		UPDATE SERVICIO SET 
		NOMBRE = NOMBRE,
		DESCRIPCION = DESCRIPCION,
		HOTELID = HOTELID
		WHERE ID = SERVICIO.ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_SERVICIO
(
	ID 		INT,
	ESTADO	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM SERVICIO WHERE SERVICIO.ID = ID);
	IF X = 1 THEN
		UPDATE SERVICIO SET ESTADO = ESTADO WHERE SERVICIO.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//


/*HABITACION*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_HABITACION
(
	NUMERO			VARCHAR(10),
	CAPACIDAD		INT,
	CAMAS 			INT,
	BANOS			INT,
	HOTELID			INT 
)
RETURNS INT
BEGIN 
	INSERT INTO HABITACION(NUMERO,CAPACIDAD,CAMAS,BANOS,ESTADO,HOTELID) 
	VALUES(NUMERO,CAPACIDAD,CAMAS,BANOS,1,HOTELID);
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_HABITACION
(
	ID				INT,
	NUMERO			VARCHAR(10),
	CAPACIDAD		INT,
	CAMAS 			INT,
	BANOS			INT,
	HOTELID			INT 
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM HABITACION WHERE HABITACION.ID = ID);
	IF X = 1 THEN
		UPDATE HABITACION SET 
		NUMERO = NUMERO,
		CAPACIDAD = CAPACIDAD,
		CAMAS = CAMAS,
		BANOS = BANOS,
		HOTELID = HOTELID
		WHERE HABITACION.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_HABITACION
(
	ID 		INT,
	ESTADO	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM HABITACION WHERE HABITACION.ID = ID);
	IF X = 1 THEN
		UPDATE HABITACION SET ESTADO = ESTADO WHERE HABITACION.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//
 
 /*PROMOCION*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_PROMOCION
(
	FECHA			DATE,
	PRECIO 			INT,
	HABITACIONID	INT
)
RETURNS INT
BEGIN 
	INSERT INTO PRECIODIA(FECHA,PRECIO,ESTADO,HABITACIONID) 
	VALUES(FECHA,PRECIO,1,HABITACIONID);
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_PROMOCION
(
	ID				INT,
	FECHA			DATE,
	PRECIO 			INT,
	HABITACIONID	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PROMOCION WHERE PROMOCION.ID = ID);
	IF X = 1 THEN
		UPDATE PROMOCION SET 
		FECHA = FECHA,
		PRECIO = PRECIO,
		HABITACIONID = HABITACIONID
		WHERE PROMOCION.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_PROMOCION
(
	ID 		INT,
	ESTADO	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PROMOCION WHERE PROMOCION.ID = ID);
	IF X = 1 THEN
		UPDATE PROMOCION SET ESTADO = ESTADO WHERE PROMOCION.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//

/*PRECIO DIA*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_PRECIODIA
(
	FECHA			DATE,
	PRECIO 			INT,
	HABITACIONID	INT
)
RETURNS INT
BEGIN 
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PRECIODIA WHERE PRECIODIA.HABITACIONID = HABITACIONID AND PRECIODIA.FECHA = FECHA);
	IF X = 0 THEN
		INSERT INTO PRECIODIA(FECHA,PRECIO,HABITACIONID) 
		VALUES(FECHA,PRECIO,HABITACIONID);
		RETURN 1; 
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_PRECIODIA
(
	ID 				INT,
	FECHA			DATE,
	PRECIO 			INT,
	HABITACIONID	INT
)
RETURNS INT
BEGIN 
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PRECIODIA WHERE PRECIODIA.ID = ID AND PRECIODIA.FECHA = FECHA AND PRECIODIA.HABITACIONID = HABITACIONID);
	IF X = 1 THEN
		UPDATE PRECIODIA SET
		PRECIO = PRECIO
		WHERE PRECIODIA.ID = ID;
		RETURN 1; 
	ELSE
		RETURN 2;
	END IF;
END
//

/*RESERVA*/


DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREAR_RESERVA
(
	FECHA_INICIO	DATE,
	FECHA_TERMINO	DATE,
	TOTAL			INT,
	MEDIO_PAGO		INT,
	HABITACIONID	INT,
	USUARIOID		INT
)
RETURNS INT
BEGIN 
	INSERT INTO RESERVA(FECHA_INICIO,FECHA_TERMINO,TOTAL,MEDIO_PAGO,ESTADO,HABITACIONID,USUARIOID) 
	VALUES(FECHA_INICIO,FECHA_TERMINO,TOTAL,MEDIO_PAGO,1,HABITACIONID,USUARIOID);
	RETURN 1; 
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_RESERVA
(
	ID 				INT,
	FECHA_INICIO	DATE,
	FECHA_TERMINO	DATE
)
RETURNS INT
BEGIN 
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM RESERVA WHERE RESERVA.ID = ID);
	IF X = 1 THEN 
		UPDATE RESERVA SET
		FECHA_INICIO = FECHA_INICIO,
		FECHA_TERMINO = FECHA_TERMINO
		WHERE RESERVA.ID = ID;
		RETURN 1; 
	ELSE
		RETURN 2;
	END IF;
	
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_ACTUALIZAR_ESTADO_RESERVA
(
	ID 				INT,
	ESTADO			INT
)
RETURNS INT
BEGIN 
	DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM RESERVA WHERE RESERVA.ID = ID);
	IF X = 1 THEN 
		UPDATE RESERVA SET
		ESTADO = ESTADO
		WHERE RESERVA.ID = ID;
		RETURN 1; 
	ELSE
		RETURN 2;
	END IF;
	
END
//

